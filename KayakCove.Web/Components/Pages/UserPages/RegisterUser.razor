@page "/user/register"
@page "/user/update/{id:int}"
@rendermode InteractiveServer
@using KayakCove.Application.DTOs
@using KayakCove.Application.Services
@using KayakCove.Web.ApiServices
@using KayakCove.Domain.Entities
@inject RoleApiService _roleApiService
@inject UserApiService _userApiService
@inject NavigationManager _navigationManager
@inject LoginStateService _loginState
@inject IJSRuntime _js

<div class="container">
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Register") account</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm FormName="RegisterAccountForm" Model="UserDto" OnvalidSubmit="AddUserSubmit">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Username" id="Username" placeholder="Username" />
                        <label for="Username">*Username</label>
                        <ValidationMessage For="@(() => UserDto.Username)" />
                    </div>
                    @if (Id == 0)
                    {
                        <div class="form-floating py-3 col-12">
                            <InputText type="password" class="form-control" @bind-Value="@UserDto.Password" id="Password" placeholder="Password" />
                            <label for="Password">*Password</label>
                            <ValidationMessage For="@(() => UserDto.Password)" />
                        </div>
                    }
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Firstname" id="Firstname" placeholder="Firstname" />
                        <label for="Firstname">*Firstname</label>
                        <ValidationMessage For="@(() => UserDto.Firstname)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Lastname" id="Lastname" placeholder="Lastname" />
                        <label for="Lastname">*Lastname</label>
                        <ValidationMessage For="@(() => UserDto.Lastname)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText type="email" class="form-control" @bind-Value="@UserDto.Email" id="Email" placeholder="Email" />
                        <label for="Email">*Email</label>
                        <ValidationMessage For="@(() => UserDto.Email)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Phonenumber" id="Phonenumber" placeholder="Phonenumber" />
                        <label for="Phonenumber">Phonenumber</label>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Streetaddress" id="Streetaddress" placeholder="Streetaddress" />
                        <label for="Streetaddress">Streetaddress</label>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Postalcode" id="Postalcode" placeholder="Postalcode" />
                        <label for="Postalcode">Postalcode</label>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.City" id="City" placeholder="City" />
                        <label for="City">City</label>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText class="form-control" @bind-Value="@UserDto.Country" id="Country" placeholder="Country" />
                        <label for="Country">Country</label>
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputSelect class="form-select" @bind-Value="@UserDto.RoleId" id="Role" placeholder="Role">
                            <option value="0" disabled>-- Select Role --</option>
                            @foreach (var item in Roles)
                            {
                                <option value="@item.Id">@item.Title</option>
                            }
                        </InputSelect>
                        <label for="Role">Role</label>

                        <ValidationMessage For="@(() => UserDto.RoleId)" />
                    </div>

                    <div class="form-group py-2">
                        <button type="submit" class="btn btn-success m-3" disabled="@_isLoading">
                            <i class="bi bi-floppy"></i> @(Id > 0 ? "Update" : "Register") Account
                        </button>
                        <button @onclick="OnAddUserCancel" class="btn btn-danger m-3" disabled="@_isLoading">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private bool _isLoading { get; set; } = true;
    private UserDto UserFallback { get; set; } = new UserDto();

    [Parameter]
    public int Id { get; set; }
    public UserDto UserDto { get; set; } = new UserDto() 
    {
        Phonenumber = string.Empty,
        Streetaddress = string.Empty,
        Postalcode = string.Empty,
        City = string.Empty,
        Country = string.Empty,
        Role = new Role { Id = 0, Title = string.Empty } };

    public IEnumerable<RoleDto> Roles = new List<RoleDto>();

    protected override async Task OnInitializedAsync()
    {
        Roles = await _roleApiService.GetAllRolesAsync();

        if(Id > 0)
        {
            UserDto = await _userApiService.GetUserByIdAsync(Id);

            UserFallback.Id = Id;
            UserFallback.Username = UserDto.Username;
            UserFallback.Password = UserDto.Password;
            UserFallback.Firstname = UserDto.Firstname;
            UserFallback.Lastname = UserDto.Lastname;
            UserFallback.Email = UserDto.Email;
            UserFallback.Streetaddress = UserDto.Streetaddress;
            UserFallback.Postalcode = UserDto.Postalcode;
            UserFallback.City = UserDto.City;
            UserFallback.Country = UserDto.Country;
            UserFallback.Phonenumber = UserDto.Phonenumber;
            UserFallback.RoleId = UserDto.RoleId;
            UserFallback.Role = UserDto.Role;
        }

        _isLoading = false;
    }

    private async Task AddUserSubmit()
    {
        _isLoading = true;

        if(Id == 0)
        {
            UserDto.Role = new Role() { Id = 0, Title = string.Empty };
            var result = await _userApiService.CreateUserAsync(UserDto);

            if (result is not null)
                await _js.ToastrSuccess("User created!");
            else
                await _js.ToastrError("Something went wrong!");
        }
        else
        {
            UserDto.Role = new Role() { Id = 0, Title = string.Empty };

            var result = await _userApiService.UpdateUserAsync(Id, UserDto);

            if (result)
                await _js.ToastrSuccess("User updated!");
            else
                await _js.ToastrError("Something went wrong!");
        }


        _isLoading = false;

        if (_loginState.IsAdminLoggedIn)
        {
            _navigationManager.NavigateTo("/user");
        }
        else
        {
            _navigationManager.NavigateTo("/login");
        }
    }

    private void OnAddUserCancel()
    {
        UserDto.Id = UserFallback.Id;
        UserDto.Username = UserFallback.Username;
        UserDto.Password = UserFallback.Password;
        UserDto.Firstname = UserFallback.Firstname;
        UserDto.Lastname = UserFallback.Lastname;
        UserDto.Email = UserFallback.Email;
        UserDto.Streetaddress = UserFallback.Streetaddress;
        UserDto.Postalcode = UserFallback.Postalcode;
        UserDto.City = UserFallback.City;
        UserDto.Country = UserFallback.Country;
        UserDto.Phonenumber = UserFallback.Phonenumber;
        UserDto.RoleId = UserFallback.RoleId;
        UserDto.Role = UserFallback.Role;

        _navigationManager.NavigateTo("/user");
    }
}

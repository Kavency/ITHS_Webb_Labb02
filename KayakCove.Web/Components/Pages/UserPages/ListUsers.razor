@page "/user"
@rendermode InteractiveServer
@using KayakCove.Application.DTOs
@using KayakCove.Application.Services
@using KayakCove.Domain.Entities
@using KayakCove.Web.ApiServices
@using KayakCove.Web.Components.Shared
@inject NavigationManager _navigation
@inject UserApiService _userApiService
@inject IJSRuntime _js

<ConfirmModal OnConfirmClicked="OnDeleteConfirmClicked"></ConfirmModal>

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading data" />
    </div>
}
else
{
    <div class="container">
        <div class="card shadow border-0 mt-4">
            <div class="card-header bg-black bg-gradient ml-0 py-3">
                <div class="row">
                    <div class="col-12 text-center">
                        <h2 class="text-white py-2">Users</h2>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                <div class="row pb-3">
                    <div class="col-12 text-end">
                        <button class="btn btn-lg btn-success" @onclick="NavigateToCreateUserPage"><i class="bi bi-plus-square"></i> Add User</button>
                    </div>
                </div>
                @if (Users.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Username</th>
                                <th>Firstname</th>
                                <th>Lastname</th>
                                <th>Account created</th>
                                <th>Last password change</th>
                                <th>Last login</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in Users)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Username</td>
                                    <td>@item.Firstname</td>
                                    <td>@item.Lastname</td>
                                    <td>@item.AccountCreated</td>
                                    <td>@item.LastPasswordChange</td>
                                    <td>@item.LastLogin</td>

                                    <td>
                                        <button class="btn btn-primary m-1 py-1 px-2" @onclick="() => NavigateToUpdateUserPage(item.Id)"><i class="bi bi-pencil"></i></button>
                                        <button class="btn btn-danger m-1 py-1 px-2" @onclick="() => OnDeleteClicked(item.Id)"><i class="bi bi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool IsLoading { get; set; } = true;
    public IEnumerable<UserDto>? Users { get; set; }
    private int DeleteUserId { get; set; } = 0;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            Users = await _userApiService.GetAllUsersAsync();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToCreateUserPage()
    {
        _navigation.NavigateTo("/user/register");
    }

    private void NavigateToUpdateUserPage(int id)
    {
        _navigation.NavigateTo($"/user/update/{id}");
    }

    private void OnDeleteClicked(int id)
    {
        DeleteUserId = id;
        _js.InvokeVoidAsync("showConfirmModal");
    }

    private async Task OnDeleteConfirmClicked(bool isConfirmed)
    {
        IsLoading = true;
        await _js.InvokeVoidAsync("hideConfirmModal");
        if (isConfirmed && DeleteUserId != 0)
        {
            var isDeleted = await _userApiService.DeleteUserAsync(DeleteUserId);
            if (isDeleted)
                _js.ToastrSuccess("User deleted");
            else
                _js?.ToastrError("Something went wrong.");

            Users = await _userApiService.GetAllUsersAsync();
        }
        DeleteUserId = 0;
        IsLoading = false;
    }
}
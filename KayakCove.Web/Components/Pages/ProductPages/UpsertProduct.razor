@page "/product/create"
@page "/product/update/{id:int}"
@rendermode InteractiveServer
@using KayakCove.Application.DTOs
@using KayakCove.Application.Services
@using KayakCove.Domain.Entities
@using KayakCove.Web.ApiServices
@inject ProductApiService _productApiService
@inject CategoryApiService _categoryApiService
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _js

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-black bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Product</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <EditForm FormName="UpsertProductForm" Model="ProductDto" OnvalidSubmit="OnUpsertProductSubmit">
            <DataAnnotationsValidator />

            <div class="border p-3 mt-4">
                <div class="form-floating py-3 col-12">
                    <InputText class="form-control" @bind-Value="@ProductDto.Name" id="Name" placeholder="Name" />
                    <label for="Name">Name</label>
                    <ValidationMessage For="@(() => ProductDto.Name)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputTextArea class="form-control" @bind-Value="@ProductDto.Description" id="Description" placeholder="Description" />
                    <label for="Description">Description</label>
                    <ValidationMessage For="@(() => ProductDto.Description)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputNumber class="form-control" @bind-Value="@ProductDto.Price" id="Price" placeholder="Price" />
                    <label for="Price">Price</label>
                    <ValidationMessage For="@(() => ProductDto.Price)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputSelect class="form-select" @bind-Value="@ProductDto.CategoryId" id="Category" placeholder="Category">
                        <option value="0" disabled>--Select Category--</option>
                        @foreach (var item in Categories)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                    <label for="Category">Category</label>

                    <ValidationMessage For="@(() => ProductDto.CategoryId)" />
                </div>
                <div class="form-floating py-3 col-12">
                    @if (string.IsNullOrEmpty(ProductDto.ImageUri))
                    {
                        <InputFile class="form-control pb-3" OnChange="UploadImageFile" id="imageFile" accept="image/x-png,image/jpg,image/jpeg" />
                        <label for="imageFile">Upload File</label>
                    }
                    @if (!string.IsNullOrEmpty(ProductDto.ImageUri))
                    {
                        <div class="row">
                            <div class="col-3">
                                <img src="@ProductDto.ImageUri" width="300" height="300" alt="Image of a product." class="img-thumbnail" />
                            </div>
                            <div class="col-9">
                                <i class="bi bi-trash btn btn-outline-danger" @onclick="OnDeleteImageClick">Remove</i>
                            </div>
                        </div>
                    }
                </div>
                <div class ="form-floating py-3 col-12">
                    <InputNumber class="form-control" @bind-Value="@ProductDto.Quantity" id="Quantity" placeholder="Quantity" />
                    <label for="Quantity">Quantity</label>
                </div>
                <div class="form-floating py-3 col-12">
                    Expired
                    <InputCheckbox class="form-switch" @bind-Value="@ProductDto.HasExpired" />
                </div>
                <div class="form-group py-2">
                    <button type="submit" class="btn btn-success m-3" disabled="@_isLoading">
                        <i class="bi bi-floppy"></i> @(Id > 0 ? "Update" : "Create")
                    </button>
                    <button @onclick="OnUpsertProductCancel" class="btn btn-danger m-3" disabled="@_isLoading">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private bool _isLoading { get; set; } = true;
    private string? _directoryPath { get; set; }

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public ProductDto ProductDto { get; set; } = new ProductDto() { Category = new Category() { Id = 0, Name = string.Empty } };

    public ProductDto ProductFallback { get; set; } = new ProductDto();
    public IEnumerable<CategoryDto> Categories = new List<CategoryDto>();


    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            ProductDto = await _productApiService.GetProductByIdAsync(Id);

            var imagePath = Path.Combine(_webHostEnvironment.WebRootPath, ProductDto.ImageUri.TrimStart('/'));
            if (!File.Exists(imagePath))
            {
                ProductDto.ImageUri = string.Empty;
            }

            ProductFallback.Name = ProductDto.Name;
            ProductFallback.Description = ProductDto.Description;
            ProductFallback.Price = ProductDto.Price;
            ProductFallback.ImageUri = ProductDto.ImageUri;
            ProductFallback.Quantity = ProductDto.Quantity;
            ProductFallback.CategoryId = ProductDto.CategoryId;
            ProductFallback.HasExpired = ProductDto.HasExpired;
        }

        Categories = await _categoryApiService.GetAllCategoriesAsync();

        _directoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "products");
        _isLoading = false;
    }

    public async Task OnUpsertProductSubmit()
    {
        _isLoading = true;

        if (Id == 0)
        {
            await _productApiService.CreateProductAsync(ProductDto);
            await _js.ToastrSuccess("Product created!");
        }
        else
        {
            ProductDto.Category = new Category() { Id = 0, Name = string.Empty };

            var result = await _productApiService.UpdateProductAsync(Id, ProductDto);

            if (result)
                _js.ToastrSuccess("Product updated!");
            else
                _js.ToastrError("Something went wrong!");
        }

        _isLoading = false;

        _navigationManager.NavigateTo("products");
    }

    private void OnUpsertProductCancel()
    {
        ProductDto.Name = ProductFallback.Name;
        ProductDto.Description = ProductFallback.Description;
        ProductDto.Price = ProductFallback.Price;
        ProductDto.ImageUri = ProductFallback.ImageUri;
        ProductDto.Quantity = ProductFallback.Quantity;
        ProductDto.CategoryId = ProductFallback.CategoryId;
        ProductDto.HasExpired = ProductFallback.HasExpired;

        _navigationManager.NavigateTo("products");
    }

    private async Task UploadImageFile(InputFileChangeEventArgs e)
    {
        _isLoading = true;

        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";

        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }

        var path = Path.Combine(_directoryPath, newFileName);
        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);

        ProductDto.ImageUri = $"/images/products/{newFileName}";

        _isLoading = false;
    }

    private void OnDeleteImageClick()
    {
        if (ProductDto.ImageUri is null)
            return;

        var fileToDelete = ProductDto.ImageUri.Split('/').Last();
        var pathToImageToDelete = Path.Combine(_directoryPath, fileToDelete);

        if (File.Exists(pathToImageToDelete))
            File.Delete(pathToImageToDelete);

        ProductDto.ImageUri = string.Empty;
    }
}

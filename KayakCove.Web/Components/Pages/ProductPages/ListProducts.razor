@page "/products"
@using KayakCove.Application.Services
@using KayakCove.Domain.Entities
@inject ProductService ProductService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Products Page</PageTitle>

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading data" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Products</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <button class="btn btn-lg btn-success" @onclick="NavigateToCreateProductPage">Add product</button>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>In Stock</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Products)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>@item.Price</td>
                                <td>@item.IsInStock</td>
                                <td>
                                    <button class="btn btn-primary m-1 py-1 px-2 " @onclick="() => NavigateToUpdateProductPage(item.Id)">U</button>
                                    <button class="btn btn-danger m-1 py-1 px-2" @onclick="() => NavigateToDeleteProductPage(item.Id)">D</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    public bool IsLoading { get; set; } = true;
    public IEnumerable<Product> Products;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Products = await ProductService.GetAllProductsAsync();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToCreateProductPage()
    {
        Navigation.NavigateTo("/product/create");
    }

    private void NavigateToUpdateProductPage(int id)
    {
        Navigation.NavigateTo($"/product/update/{id}");
    }

    private void NavigateToDeleteProductPage(int id)
    {
        Navigation.NavigateTo($"/product/delete/{id}");
    }

}

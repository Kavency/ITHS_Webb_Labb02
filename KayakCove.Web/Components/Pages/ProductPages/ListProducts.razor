@page "/products"
@rendermode InteractiveServer
@using KayakCove.Application.DTOs
@using KayakCove.Application.Services
@using KayakCove.Web.ApiServices
@using KayakCove.Web.Components.Shared
@inject ProductApiService _productApiService
@inject NavigationManager Navigation
@inject IJSRuntime _js
@inject IWebHostEnvironment _webHostEnvironment

<PageTitle>Products Page</PageTitle>
<ConfirmModal OnConfirmClicked="OnDeleteConfirmClicked"></ConfirmModal>

@if (_isLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading data" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Products</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <button class="btn btn-lg btn-success" @onclick="NavigateToCreateProductPage"><i class="bi bi-plus-square"></i> Add product</button>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Has Expired</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Products)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>@item.Category.Name</td>
                                <td>@item.Price</td>
                                <td>@item.HasExpired</td>
                                <td>
                                    <button class="btn btn-primary m-1 py-1 px-2 " @onclick="() => NavigateToUpdateProductPage(item.Id)"><i class="bi bi-pencil"></i></button>
                                    <button class="btn btn-danger m-1 py-1 px-2" @onclick="() => OnDeleteClick(item.Id)"><i class="bi bi-trash"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool _isLoading { get; set; } = true;
    private int _deleteProductId { get; set; }
    public IEnumerable<ProductDto> Products;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Products = await _productApiService.GetAllProductsAsync();
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToCreateProductPage()
    {
        Navigation.NavigateTo("/product/create");
    }

    private void NavigateToUpdateProductPage(int id)
    {
        Navigation.NavigateTo($"/product/update/{id}");
    }

    private void NavigateToDeleteProductPage(int id)
    {
        Navigation.NavigateTo($"/product/delete/{id}");
    }

}

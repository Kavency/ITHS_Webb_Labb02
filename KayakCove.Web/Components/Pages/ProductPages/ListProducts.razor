@page "/products"
@rendermode InteractiveServer
@using KayakCove.Application.DTOs
@using KayakCove.Application.Services
@using KayakCove.Web.ApiServices
@using KayakCove.Web.Components.Shared
@inject ProductApiService _productApiService
@inject CategoryApiService _categoryApiService
@inject NavigationManager Navigation
@inject IJSRuntime _js
@inject IWebHostEnvironment _webHostEnvironment

<PageTitle>Products Page</PageTitle>
<ConfirmModal OnConfirmClicked="OnDeleteConfirmClicked"></ConfirmModal>

@if (_isLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading data" />
    </div>
}
else
{
    <div class="container">
        <div class="card shadow border-0 mt-4">
            <div class="card-header bg-black bg-gradient ml-0 py-3">
                <div class="row">
                    <div class="col-12 text-center">
                        <h2 class="text-white py-2">Products</h2>
                    </div>
                </div>
                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                    placeholder="Search"
                    style="width: 100%; padding-top: 5px; padding-bottom: 5px; padding-left: 25px;"
                    @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductsByName">
                    <span style="position: relative; left: -40px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
            <div class="card-body p-4">
                <div class="row pb-3">
                    <EditForm class="row my-2 justify-content-center" FormName="FilterCategoryForm" Model="_filteredCategoryId">
                        <div class="col-1 align-content-center text-end">Filter on:</div>
                        <div class="col-2">
                            <InputSelect class="form-select col-4" @bind-Value="@_filteredCategoryId" id="Category" placeholder="Category">
                                <option value="0">All</option>
                                @foreach (var item in Categories)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <button class="col-1 btn btn-primary" @onclick="FilterProductsByCategory">Apply filter</button>
                    </EditForm>
                    <div class="col-12 text-end">
                        <button class="btn btn-lg btn-success" @onclick="NavigateToCreateProductPage"><i class="bi bi-plus-square"></i> Add product</button>
                    </div>
                </div>
                @if (FilteredProducts.Count() == 0 || FilteredProducts is null)
                {
                    <div class="row m-5 text-center">
                        <p class="text-danger">Could not find any items matching the filter. <a href="/products" @onclick="ClearFilter">Clear filter</a></p>
                    </div>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th>Price</th>
                                <th>Has Expired</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in FilteredProducts)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Description</td>
                                    <td>@item.Category.Name</td>
                                    <td>@item.Price</td>
                                    <td>@item.HasExpired</td>
                                    <td>
                                        <button class="btn btn-primary m-1 py-1 px-2 " @onclick="() => NavigateToUpdateProductPage(item.Id)"><i class="bi bi-pencil"></i></button>
                                        <button class="btn btn-danger m-1 py-1 px-2" @onclick="() => OnDeleteClick(item.Id)"><i class="bi bi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool _isLoading { get; set; } = true;
    private int _deleteProductId { get; set; }
    private int _filteredCategoryId { get; set; } = 0;
    private string _searchText { get; set; } = string.Empty;
    public IEnumerable<ProductDto> Products;
    public IEnumerable<ProductDto> FilteredProducts { get; set; } = new List<ProductDto>();
    public IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();


    protected override async Task OnInitializedAsync()
    {
        Products = await _productApiService.GetAllProductsAsync();
        Categories = await _categoryApiService.GetAllCategoriesAsync();
        FilterProductsByCategory();
        _isLoading = false;
        
    }

    private void NavigateToCreateProductPage()
    {
        Navigation.NavigateTo("/product/create");
    }

    private void NavigateToUpdateProductPage(int id)
    {
        Navigation.NavigateTo($"/product/update/{id}");
    }

    private void OnDeleteClick(int id)
    {
        _deleteProductId = id;
        _js.InvokeVoidAsync("showConfirmModal");
    }

    private async Task OnDeleteConfirmClicked(bool isConfirmed)
    {
        _isLoading = true;
        await _js.InvokeVoidAsync("hideConfirmModal");
        if (isConfirmed && _deleteProductId != 0)
        {
            var isDeleted = await _productApiService.DeleteProductAsync(_deleteProductId);
            if (isDeleted)
            {
                _js.ToastrSuccess("Product deleted");
                await DeleteImage(_deleteProductId);
            }
            else
                _js?.ToastrError("Something went wrong.");

            Products = await _productApiService.GetAllProductsAsync();
        }
        _deleteProductId = 0;
        _isLoading = false;
    }


    private async Task DeleteImage(int id)
    {
        var deletedProduct = Products.FirstOrDefault((p => p.Id == _deleteProductId));
        if (deletedProduct is not null)
        {
            var imagePath = Path.Combine(_webHostEnvironment.WebRootPath, deletedProduct.ImageUri.TrimStart('/'));
            if (File.Exists(imagePath))
            {
                File.Delete(imagePath);
            }
        }
    }

    private void FilterProductsByName(string searchTextEntered)
    {
        _filteredCategoryId = 0;

        if (string.IsNullOrWhiteSpace(searchTextEntered))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products.Where(x => x.Name.Contains(searchTextEntered, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        _searchText = searchTextEntered;
    }

    private void FilterProductsByCategory()
    {
        if (_filteredCategoryId == 0)
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products.Where(p => p.CategoryId == _filteredCategoryId).ToList();
        }

        _searchText = string.Empty;
    }

    private void ClearFilter()
    {
        _filteredCategoryId = 0;
        _searchText = string.Empty;
        FilterProductsByCategory();
    }
}
